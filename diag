import pandas as pd
import numpy as np
import os

def solicitar_rutas_archivos():
    """
    Solicita al usuario las rutas completas de los archivos necesarios
    """
    print("="*60)
    print("CONFIGURACIÓN DE ARCHIVOS")
    print("="*60)
    
    print("Por favor, proporciona las rutas completas de los archivos:")
    print("(Puedes arrastrar y soltar los archivos en la terminal, o copiar la ruta completa)")
    
    # Solicitar archivo Base SAP TRX
    while True:
        print(f"\n1. ARCHIVO BASE SAP TRX")
        print("   Ejemplo: C:\\Users\\tu_usuario\\Documents\\Base Sap TRX.xlsx")
        ruta_base_sap = input("   Ruta completa del archivo Base SAP TRX: ").strip().replace('"', '')
        
        if os.path.exists(ruta_base_sap):
            print(f"   ✅ Archivo encontrado: {os.path.basename(ruta_base_sap)}")
            break
        else:
            print(f"   ❌ Archivo no encontrado en: {ruta_base_sap}")
            print("   Verifica la ruta e intenta nuevamente")
            
            respuesta = input("   ¿Deseas intentar otra ruta? (s/n): ").lower()
            if respuesta != 's':
                return None, None
    
    # Solicitar archivo Nombres NMC 2025
    while True:
        print(f"\n2. ARCHIVO NOMBRES NMC 2025")
        print("   Ejemplo: C:\\Users\\tu_usuario\\Documents\\Nombres NMC 2025.xlsx")
        ruta_nmc = input("   Ruta completa del archivo Nombres NMC 2025: ").strip().replace('"', '')
        
        if os.path.exists(ruta_nmc):
            print(f"   ✅ Archivo encontrado: {os.path.basename(ruta_nmc)}")
            break
        else:
            print(f"   ❌ Archivo no encontrado en: {ruta_nmc}")
            print("   Verifica la ruta e intenta nuevamente")
            
            respuesta = input("   ¿Deseas intentar otra ruta? (s/n): ").lower()
            if respuesta != 's':
                return None, None
    
    return ruta_base_sap, ruta_nmc

def procesar_cruce_datos():
    """
    Función principal para cruzar datos SIN alterar el orden ni estructura original
    """
    
    # 1. SOLICITAR RUTAS DE ARCHIVOS
    ruta_base_sap, ruta_nmc = solicitar_rutas_archivos()
    
    if not ruta_base_sap or not ruta_nmc:
        print("❌ No se pudieron obtener las rutas de los archivos. Terminando programa.")
        return None
    
    # 2. LEER ARCHIVOS
    print(f"\n" + "="*60)
    print("LEYENDO ARCHIVOS")
    print("="*60)
    
    try:
        # Leer archivo Base Sap TRX EXACTAMENTE como está
        print(f"Leyendo: {os.path.basename(ruta_base_sap)}")
        base_sap_original = pd.read_excel(ruta_base_sap)
        print(f"✅ Base SAP cargada: {len(base_sap_original)} filas, {len(base_sap_original.columns)} columnas")
        
        # Leer archivo Nombres NMC 2025 - Hoja Tipo Producto
        print(f"Leyendo hoja 'Tipo Producto' de: {os.path.basename(ruta_nmc)}")
        tipo_producto = pd.read_excel(ruta_nmc, sheet_name='Tipo Producto')
        print(f"✅ Tipo Producto cargado: {len(tipo_producto)} filas, {len(tipo_producto.columns)} columnas")
        
        # Leer archivo Nombres NMC 2025 - Hoja Tipo Gasto
        print(f"Leyendo hoja 'Tipo Gasto' de: {os.path.basename(ruta_nmc)}")
        tipo_gasto = pd.read_excel(ruta_nmc, sheet_name='Tipo Gasto')
        print(f"✅ Tipo Gasto cargado: {len(tipo_gasto)} filas, {len(tipo_gasto.columns)} columnas")
        
    except FileNotFoundError as e:
        print(f"❌ Error: Archivo no encontrado - {e}")
        return None
    except ValueError as e:
        print(f"❌ Error: Problema con las hojas del archivo - {e}")
        print("Verificando hojas disponibles...")
        try:
            xl_file = pd.ExcelFile(ruta_nmc)
            print(f"Hojas disponibles: {xl_file.sheet_names}")
        except:
            pass
        return None
    except Exception as e:
        print(f"❌ Error inesperado al leer archivos: {e}")
        return None
    
    # 3. LIMPIAR Y PREPARAR DATOS DE REFERENCIA (NO EL ORIGINAL)
    print(f"\n" + "="*60)
    print("PREPARANDO DATOS DE REFERENCIA")
    print("="*60)
    
    # Limpiar espacios SOLO en los archivos de referencia
    tipo_producto.columns = tipo_producto.columns.str.strip()
    tipo_gasto.columns = tipo_gasto.columns.str.strip()
    
    # NO tocamos base_sap_original para mantener estructura exacta
    print(f"✅ Archivo Base SAP mantenido intacto")
    print(f"Columnas en Tipo Producto: {list(tipo_producto.columns)}")
    print(f"Columnas en Tipo Gasto: {list(tipo_gasto.columns)}")
    
    # 4. VERIFICAR COLUMNAS NECESARIAS
    # Buscar la columna Ce.coste (puede tener espacios)
    col_ce_coste = None
    for col in tipo_producto.columns:
        if 'ce.coste' in col.lower().replace(' ', ''):
            col_ce_coste = col
            break
    
    if not col_ce_coste:
        print("❌ No se encontró la columna 'Ce.coste' en Tipo Producto")
        print(f"Columnas disponibles: {list(tipo_producto.columns)}")
        return None
    
    print(f"✅ Columna Ce.coste identificada como: '{col_ce_coste}'")
    
    # Verificar que existan las columnas necesarias en Base SAP
    columnas_base_sap = list(base_sap_original.columns)
    print(f"Columnas en Base SAP: {columnas_base_sap[:5]}..." if len(columnas_base_sap) > 5 else f"Columnas en Base SAP: {columnas_base_sap}")
    
    # Buscar Centro coste en Base SAP (puede tener variaciones de nombre)
    col_centro_coste = None
    for col in base_sap_original.columns:
        if 'centro' in str(col).lower() and 'cost' in str(col).lower():
            col_centro_coste = col
            break
    
    if not col_centro_coste:
        print("❌ No se encontró la columna 'Centro coste' en Base SAP")
        print(f"Columnas disponibles: {list(base_sap_original.columns)}")
        return None
    
    # Buscar Clase Coste en Base SAP
    col_clase_coste = None
    for col in base_sap_original.columns:
        if 'clase' in str(col).lower() and 'cost' in str(col).lower():
            col_clase_coste = col
            break
    
    if not col_clase_coste:
        print("❌ No se encontró la columna 'Clase Coste' en Base SAP")
        print(f"Columnas disponibles: {list(base_sap_original.columns)}")
        return None
    
    print(f"✅ Centro coste identificado como: '{col_centro_coste}'")
    print(f"✅ Clase coste identificado como: '{col_clase_coste}'")
    
    # 5. CREAR DICCIONARIOS DE MAPEO (SIN ALTERAR DATOS ORIGINALES)
    print(f"\n" + "="*60)
    print("CREANDO MAPEOS DE REFERENCIA")
    print("="*60)
    
    # Crear diccionario de mapeo para Producto y Estado
    mapeo_producto = {}
    mapeo_estado = {}
    
    for _, row in tipo_producto.iterrows():
        centro_coste = row[col_ce_coste]
        if pd.notna(centro_coste):
            mapeo_producto[centro_coste] = row['Producto'] if pd.notna(row['Producto']) else ''
            mapeo_estado[centro_coste] = row['Estado'] if pd.notna(row['Estado']) else ''
    
    print(f"✅ Mapeo de productos creado: {len(mapeo_producto)} entradas")
    print(f"   Ejemplos: {list(mapeo_producto.items())[:3]}")
    
    # Crear diccionario de mapeo para Tipo Gasto
    mapeo_tipo_gasto = {}
    
    for _, row in tipo_gasto.iterrows():
        clase_coste = row['Clase Coste']
        if pd.notna(clase_coste):
            mapeo_tipo_gasto[clase_coste] = row['TIPO GSTO'] if pd.notna(row['TIPO GSTO']) else ''
    
    print(f"✅ Mapeo de tipos de gasto creado: {len(mapeo_tipo_gasto)} entradas")
    print(f"   Ejemplos: {list(mapeo_tipo_gasto.items())[:3]}")
    
    # 6. CREAR RESULTADO PRESERVANDO ORDEN EXACTO
    print(f"\n" + "="*60)
    print("CREANDO ARCHIVO RESULTADO (PRESERVANDO ORDEN EXACTO)")
    print("="*60)
    
    # Leer el archivo Excel RAW para preservar orden exacto
    resultado = pd.read_excel(ruta_base_sap)
    
    # Verificar que tenemos exactamente los mismos datos
    print(f"✅ Verificación de integridad:")
    print(f"   Filas originales: {len(base_sap_original)}")
    print(f"   Filas resultado: {len(resultado)}")
    print(f"   Columnas originales: {len(base_sap_original.columns)}")
    print(f"   Columnas resultado: {len(resultado.columns)}")
    
    # Verificar que los datos son idénticos
    datos_identicos = True
    for col in base_sap_original.columns:
        if col in resultado.columns:
            if not base_sap_original[col].equals(resultado[col]):
                print(f"⚠️  Datos diferentes detectados en columna: {col}")
                datos_identicos = False
        else:
            print(f"⚠️  Columna perdida: {col}")
            datos_identicos = False
    
    if datos_identicos:
        print(f"✅ Datos idénticos confirmados")
    else:
        print(f"❌ PROBLEMA: Los datos no son idénticos")
        return None
    
    # 7. AGREGAR NUEVAS COLUMNAS SIN ALTERAR NADA MÁS
    print(f"\n" + "="*60)
    print("AGREGANDO COLUMNAS NUEVAS")
    print("="*60)
    
    # Agregar columna Producto
    print(f"Agregando columna 'Producto'...")
    nueva_columna_producto = []
    for idx, row in resultado.iterrows():
        centro_coste_valor = row[col_centro_coste]
        producto = mapeo_producto.get(centro_coste_valor, '')
        nueva_columna_producto.append(producto)
    
    resultado['Producto'] = nueva_columna_producto
    registros_con_producto = sum(1 for x in nueva_columna_producto if x != '')
    print(f"✅ Columna 'Producto' agregada: {registros_con_producto} registros con valor")
    
    # Agregar columna Estado Producto
    print(f"Agregando columna 'Estado Producto'...")
    nueva_columna_estado = []
    for idx, row in resultado.iterrows():
        centro_coste_valor = row[col_centro_coste]
        estado = mapeo_estado.get(centro_coste_valor, '')
        nueva_columna_estado.append(estado)
    
    resultado['Estado Producto'] = nueva_columna_estado
    registros_con_estado = sum(1 for x in nueva_columna_estado if x != '')
    print(f"✅ Columna 'Estado Producto' agregada: {registros_con_estado} registros con valor")
    
    # Agregar columna Tipo Gasto
    print(f"Agregando columna 'Tipo Gasto'...")
    nueva_columna_tipo_gasto = []
    for idx, row in resultado.iterrows():
        clase_coste_valor = row[col_clase_coste]
        tipo_gasto_valor = mapeo_tipo_gasto.get(clase_coste_valor, '')
        nueva_columna_tipo_gasto.append(tipo_gasto_valor)
    
    resultado['Tipo Gasto'] = nueva_columna_tipo_gasto
    registros_con_tipo_gasto = sum(1 for x in nueva_columna_tipo_gasto if x != '')
    print(f"✅ Columna 'Tipo Gasto' agregada: {registros_con_tipo_gasto} registros con valor")
    
    # 8. VERIFICACIÓN CRÍTICA DE INTEGRIDAD
    print(f"\n" + "="*60)
    print("VERIFICACIÓN CRÍTICA DE INTEGRIDAD")
    print("="*60)
    
    # Verificar algunos centros de costo específicos
    centros_muestra = resultado[col_centro_coste].unique()[:5]
    print(f"Verificando integridad en centros de costo muestra:")
    
    for centro in centros_muestra:
        if pd.notna(centro):
            # Filtrar por centro de costo en original y resultado
            filas_original = base_sap_original[base_sap_original[col_centro_coste] == centro]
            filas_resultado = resultado[resultado[col_centro_coste] == centro]
            
            print(f"\n🔍 Centro {centro}:")
            print(f"   Filas en original: {len(filas_original)}")
            print(f"   Filas en resultado: {len(filas_resultado)}")
            
            if len(filas_original) == len(filas_resultado):
                # Verificar una columna numérica si existe
                columnas_numericas = []
                for col in base_sap_original.columns:
                    if 'real' in str(col).lower() or 'plan' in str(col).lower():
                        columnas_numericas.append(col)
                        break
                
                if columnas_numericas:
                    col_verificar = columnas_numericas[0]
                    suma_original = filas_original[col_verificar].sum()
                    suma_resultado = filas_resultado[col_verificar].sum()
                    
                    print(f"   Suma {col_verificar}:")
                    print(f"     Original: {suma_original:,.0f}")
                    print(f"     Resultado: {suma_resultado:,.0f}")
                    print(f"     ✅ Iguales" if suma_original == suma_resultado else f"     ❌ DIFERENTES")
    
    # 9. GENERAR REPORTE DE RESULTADOS
    print(f"\n" + "="*60)
    print("RESUMEN DE RESULTADOS")
    print("="*60)
    print(f"📊 Total de registros procesados: {len(resultado):,}")
    print(f"📦 Registros con Producto asignado: {registros_con_producto:,} ({registros_con_producto/len(resultado)*100:.1f}%)")
    print(f"📋 Registros with Estado Producto asignado: {registros_con_estado:,} ({registros_con_estado/len(resultado)*100:.1f}%)")
    print(f"💰 Registros con Tipo Gasto asignado: {registros_con_tipo_gasto:,} ({registros_con_tipo_gasto/len(resultado)*100:.1f}%)")
    
    # 10. GUARDAR RESULTADO
    print(f"\n" + "="*60)
    print("GUARDANDO RESULTADO")
    print("="*60)
    
    # Obtener directorio donde está el archivo original
    directorio_salida = os.path.dirname(ruta_base_sap)
    nombre_archivo_resultado = os.path.join(directorio_salida, 'Base_Sap_TRX_Resultado.xlsx')
    
    try:
        resultado.to_excel(nombre_archivo_resultado, index=False)
        print(f"✅ Archivo resultado guardado exitosamente:")
        print(f"   📁 {nombre_archivo_resultado}")
        print(f"   📊 {len(resultado):,} filas × {len(resultado.columns)} columnas")
        print(f"   📊 Estructura: {len(base_sap_original.columns)} columnas originales + 3 nuevas")
    except Exception as e:
        print(f"❌ Error al guardar archivo: {e}")
        return resultado
    
    # Mostrar muestra final
    print(f"\n📋 Muestra de primeros 3 registros (columnas clave):")
    columnas_muestra = [col_clase_coste, col_centro_coste, 'Producto', 'Estado Producto', 'Tipo Gasto']
    print(resultado[columnas_muestra].head(3).to_string(index=False))
    
    return resultado

# EJECUTAR EL PROCESO
if __name__ == "__main__":
    try:
        print("="*60)
        print("🔄 PROCESADOR DE CRUCE SAP-NMC 2025 (PRESERVACIÓN EXACTA)")
        print("="*60)
        print("Este programa:")
        print("• Mantiene EXACTAMENTE la estructura original de Base Sap TRX")
        print("• NO altera, reordena ni modifica ningún dato existente")
        print("• Solo AGREGA 3 columnas nuevas al final")
        print("• Preserva el orden exacto de las filas")
        print("="*60)
        
        # Ejecutar el procesamiento principal
        resultado = procesar_cruce_datos()
        
        if resultado is not None:
            print(f"\n🎉 ¡PROCESO COMPLETADO EXITOSAMENTE!")
            print(f"📁 El archivo resultado es una copia EXACTA + 3 columnas nuevas")
            print(f"🔍 Verifica que los totales por centro de costo sean idénticos")
        else:
            print(f"\n❌ El proceso no pudo completarse.")
        
        input(f"\nPresiona Enter para cerrar...")
        
    except KeyboardInterrupt:
        print(f"\n\n⏹️ Proceso cancelado por el usuario")
        
    except Exception as e:
        print(f"\n❌ Error inesperado: {e}")
        import traceback
        traceback.print_exc()
        input(f"\nPresiona Enter para cerrar...")
